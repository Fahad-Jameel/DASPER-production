import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Image,
  Dimensions,
  Alert,
  Share,
  Modal,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import * as Animatable from 'react-native-animatable';
import { Ionicons } from '@expo/vector-icons';
import * as Print from 'expo-print';
import * as Sharing from 'expo-sharing';
import LottieView from 'lottie-react-native';

// Components
import { useAuth } from '../../contexts/AuthContext';
import { useTheme } from '../../contexts/ThemeContext';
import LoadingSpinner from '../../components/LoadingSpinner';
import CostBreakdownCard from '../../components/CostBreakdownCard';
import FeedbackModal from '../../components/FeedbackModal';
import SeverityIndicator from '../../components/SeverityIndicator';

// Services
import DashboardService from '../../services/DashboardService';
import ENV from '../../../config/env.js';

import { colors, typography, spacing, shadowStyles } from '../../theme/theme';

const { width, height } = Dimensions.get('window');

const ResultsScreen = ({ route, navigation }) => {
  const { assessmentData, assessmentId } = route.params;
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);
  const [showFeedbackModal, setShowFeedbackModal] = useState(false);
  const [showImageModal, setShowImageModal] = useState(false);
  const [selectedImage, setSelectedImage] = useState('original');

  const { user } = useAuth();
  const { theme } = useTheme();

  const scrollViewRef = useRef(null);

  useEffect(() => {
    // Auto-scroll to show results
    setTimeout(() => {
      scrollViewRef.current?.scrollTo({ y: 100, animated: true });
    }, 1000);
  }, []);

  const getSeverityColor = (severity) => {
    if (severity <= 0.25) return colors.success;
    if (severity <= 0.5) return colors.warning;
    if (severity <= 0.75) return colors.secondary;
    return colors.error;
  };

  const getSeverityLabel = (severity) => {
    if (severity <= 0.25) return 'Minimal';
    if (severity <= 0.5) return 'Moderate';
    if (severity <= 0.75) return 'Severe';
    return 'Destructive';
  };

  const handleGenerateReport = async () => {
    setIsGeneratingReport(true);
    
    try {
      const reportData = await DashboardService.generateReport(assessmentId);
      
      Alert.alert(
        'Report Generated',
        'Your detailed assessment report has been generated successfully.',
        [
          {
            text: 'Download',
            onPress: () => handleDownloadReport(reportData.report_id),
          },
          {
            text: 'Share',
            onPress: () => handleShareReport(reportData.report_id),
          },
          { text: 'Later', style: 'cancel' },
        ]
      );
    } catch (error) {
      Alert.alert('Error', 'Failed to generate report. Please try again.');
    } finally {
      setIsGeneratingReport(false);
    }
  };

  const handleDownloadReport = async (reportId) => {
    try {
      const reportBlob = await DashboardService.downloadReport(reportId);
      
      if (await Sharing.isAvailableAsync()) {
        const reportUri = await createPDFFile(reportBlob);
        await Sharing.shareAsync(reportUri, {
          mimeType: 'application/pdf',
          dialogTitle: 'DASPER Assessment Report',
        });
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to download report.');
    }
  };

  const handleShareReport = async (reportId) => {
    try {
      const summary = assessmentData.summary;
      const shareMessage = `DASPER Assessment Report\n\nBuilding: ${assessmentData.building_info?.name || assessmentData.building_name}\nSeverity: ${summary?.severity_category || 'Unknown'}\nEstimated Cost: ${summary?.estimated_cost_local || 'N/A'}\n\nGenerated by DASPER - Disaster Assessment & Structural Performance Evaluation`;
      
      await Share.share({
        message: shareMessage,
        title: 'DASPER Assessment Report',
      });
    } catch (error) {
      console.error('Share error:', error);
    }
  };

  const createPDFFile = async (blob) => {
    // Generate HTML content for PDF
    const htmlContent = generateHTMLReport();
    const { uri } = await Print.printToFileAsync({ html: htmlContent });
    return uri;
  };

  const generateHTMLReport = () => {
    // Use the structured data we already created above
    
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>DASPER Assessment Report</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { text-align: center; margin-bottom: 30px; }
            .section { margin-bottom: 20px; }
            .metric { display: inline-block; margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; }
            .severity-high { color: #f44336; }
            .severity-medium { color: #ff9800; }
            .severity-low { color: #4caf50; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>DASPER Assessment Report</h1>
            <h2>${building_info?.name || assessmentData.building_name}</h2>
          </div>
          
          <div class="section">
            <h3>Building Information</h3>
            <p><strong>Type:</strong> ${building_info?.type || assessmentData.building_type}</p>
            <p><strong>Location:</strong> ${building_info?.location || assessmentData.pin_location}</p>
            <p><strong>Area:</strong> ${building_info?.area_sqm || assessmentData.estimated_building_area_sqm}mÂ²</p>
          </div>
          
          <div class="section">
            <h3>Damage Assessment</h3>
            <p><strong>Severity Score:</strong> ${((damage_assessment?.severity_score || 0) * 100).toFixed(1)}%</p>
            <p><strong>Category:</strong> ${damage_assessment?.severity_category || 'Unknown'}</p>
            <p><strong>Confidence:</strong> ${((damage_assessment?.confidence || 0.8) * 100).toFixed(0)}%</p>
          </div>
          
          <div class="section">
            <h3>Cost Estimation</h3>
            <p><strong>Total Cost:</strong> $${(cost_estimation?.total_estimated_cost_usd || 0).toLocaleString()}</p>
            <p><strong>Repair Time:</strong> ${cost_estimation?.repair_time_days || 0} days</p>
          </div>
          
          ${ai_analysis?.description ? `
          <div class="section">
            <h3>AI Analysis</h3>
            <p>${ai_analysis.description}</p>
          </div>
          ` : ''}
          
          <div class="section">
            <p><em>Report generated on ${new Date().toLocaleDateString()} by DASPER</em></p>
          </div>
        </body>
      </html>
    `;
  };

  const handleImagePress = (imageType) => {
    setSelectedImage(imageType);
    setShowImageModal(true);
  };

  const goBack = () => {
    navigation.goBack();
  };

  const goToDashboard = () => {
    navigation.navigate('Dashboard');
  };

  if (!assessmentData) {
    return (
      <View style={styles.loadingContainer}>
        <LoadingSpinner size="large" color={colors.primary} />
        <Text style={styles.loadingText}>Loading results...</Text>
      </View>
    );
  }

  // Extract data from the API response structure
  const building_info = {
    name: assessmentData.building_name,
    area_sqm: assessmentData.building_area_sqm,
    type: assessmentData.building_type,
    location: assessmentData.pin_location
  };
  
  const damage_assessment = {
    severity_score: assessmentData.severity_score || 0,
    severity_category: assessmentData.damage_severity,
    confidence: assessmentData.confidence || 0,
    damage_percentage: assessmentData.damage_percentage || 0
  };
  
  const cost_estimation = {
    total_estimated_cost_usd: assessmentData.estimated_cost || 0,
    repair_time_days: 8, // Default based on minimal damage level
    ...assessmentData.cost_breakdown
  };
  
  const summary = {
    severity_category: assessmentData.damage_severity,
    estimated_cost_local: assessmentData.estimated_cost,
    estimated_cost_usd: assessmentData.estimated_cost
  };
  
  const images = {
    // Convert heatmap URL to proper image source
    heatmap: assessmentData.heatmap_url,
    original: assessmentData.original_image_url
  };

  // AI Analysis - use recommendations from API or create fallback
  const ai_analysis = {
    description: assessmentData.recommendations?.length > 0 
      ? assessmentData.recommendations.join('. ') 
      : `Based on AI analysis, this building shows ${damage_assessment.severity_category} damage with a severity score of ${(damage_assessment.severity_score * 100).toFixed(1)}%. The estimated repair cost is $${cost_estimation.total_estimated_cost_usd?.toLocaleString() || '0'}.`,
    repair_priorities: assessmentData.recommendations || [],
    safety_concerns: damage_assessment.severity_category === 'severe' || damage_assessment.severity_category === 'destructive' 
      ? ['Structural integrity assessment needed', 'Professional inspection required'] 
      : []
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.colors.background }]}>
      {/* Header */}
      <LinearGradient
        colors={colors.primaryGradient}
        style={styles.header}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
      >
        <View style={styles.headerContent}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={goBack}
            activeOpacity={0.7}
          >
            <Ionicons name="arrow-back" size={24} color={colors.textLight} />
          </TouchableOpacity>
          
          <View style={styles.headerTextContainer}>
            <Text style={styles.headerTitle}>Assessment Results</Text>
            <Text style={styles.headerSubtitle}>
              {building_info?.name || assessmentData.building_name}
            </Text>
          </View>
          
          <TouchableOpacity
            style={styles.shareButton}
            onPress={() => handleShareReport(assessmentId)}
            activeOpacity={0.7}
          >
            <Ionicons name="share-outline" size={24} color={colors.textLight} />
          </TouchableOpacity>
        </View>
      </LinearGradient>

      <ScrollView
        ref={scrollViewRef}
        style={styles.scrollContainer}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {/* Success Animation */}
        <Animatable.View
          animation="bounceIn"
          duration={1000}
          style={styles.successContainer}
        >
          <LottieView
            source={require('../../../assets/animations/success-checkmark.json')}
            autoPlay
            loop={false}
            style={styles.successAnimation}
          />
          <Text style={[styles.successText, { color: theme.colors.text }]}>
            Analysis Complete!
          </Text>
        </Animatable.View>

        {/* Severity Overview */}
        <Animatable.View
          animation="fadeInUp"
          delay={500}
          style={styles.section}
        >
          <SeverityIndicator
            severity={damage_assessment?.severity_score || 0}
            confidence={damage_assessment?.confidence || 0.8}
            category={damage_assessment?.severity_category || 'unknown'}
          />
        </Animatable.View>

        {/* Key Metrics */}
        <Animatable.View
          animation="fadeInUp"
          delay={700}
          style={styles.section}
        >
          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
            Key Metrics
          </Text>
          
          <View style={styles.metricsGrid}>
            <View style={styles.metricCard}>
              <Ionicons name="analytics" size={32} color={colors.primary} />
              <Text style={styles.metricValue}>
                {((damage_assessment?.severity_score || 0) * 100).toFixed(0)}%
              </Text>
              <Text style={styles.metricLabel}>Damage Score</Text>
            </View>
            
            <View style={styles.metricCard}>
              <Ionicons name="home" size={32} color={colors.secondary} />
              <Text style={styles.metricValue}>
                {building_info?.area_sqm || assessmentData.estimated_building_area_sqm || 0}mÂ²
              </Text>
              <Text style={styles.metricLabel}>Building Area</Text>
            </View>
            
            <View style={styles.metricCard}>
              <Ionicons name="cash" size={32} color={colors.accent} />
              <Text style={styles.metricValue}>
                ${cost_estimation?.total_estimated_cost_usd?.toLocaleString() || '0'}
              </Text>
              <Text style={styles.metricLabel}>Repair Cost</Text>
            </View>
            
            <View style={styles.metricCard}>
              <Ionicons name="time" size={32} color={colors.warning} />
              <Text style={styles.metricValue}>
                {cost_estimation?.repair_time_days || 0}
              </Text>
              <Text style={styles.metricLabel}>Days to Repair</Text>
            </View>
          </View>
        </Animatable.View>

        {/* Images Comparison */}
        <Animatable.View
          animation="fadeInUp"
          delay={900}
          style={styles.section}
        >
          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
            Analysis Visualization
          </Text>
          
          <View style={styles.imagesContainer}>
            <TouchableOpacity
              style={styles.imageCard}
              onPress={() => handleImagePress('original')}
              activeOpacity={0.8}
            >
              <Image
                source={require('../../../assets/icon.png')}
                style={styles.analysisImage}
              />
              <View style={styles.imageOverlay}>
                <Text style={styles.imageLabel}>Original</Text>
              </View>
            </TouchableOpacity>
            
            <TouchableOpacity
              style={styles.imageCard}
              onPress={() => handleImagePress('heatmap')}
              activeOpacity={0.8}
            >
              <Image
                source={{ 
                  uri: assessmentData.heatmap_url ? 
                    `${ENV.API_BASE_URL}${assessmentData.heatmap_url}` : 
                    null 
                }}
                style={styles.analysisImage}
                defaultSource={require('../../../assets/icon.png')}
              />
              <View style={styles.imageOverlay}>
                <Text style={styles.imageLabel}>Damage Heatmap</Text>
              </View>
            </TouchableOpacity>
          </View>
        </Animatable.View>

        {/* Cost Breakdown */}
        <Animatable.View
          animation="fadeInUp"
          delay={1100}
          style={styles.section}
        >
          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
            Cost Breakdown
          </Text>
          
          <CostBreakdownCard costData={cost_estimation || {}} />
        </Animatable.View>

        {/* AI Analysis */}
        {ai_analysis && ai_analysis.description && (
          <Animatable.View
            animation="fadeInUp"
            delay={1300}
            style={styles.section}
          >
            <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
              AI Analysis Report
            </Text>
            
            <View style={styles.aiAnalysisCard}>
              <View style={styles.aiAnalysisHeader}>
                <Ionicons name="bulb" size={24} color={colors.primary} />
                <Text style={styles.aiAnalysisTitle}>Detailed Assessment</Text>
              </View>
              
              <Text style={styles.aiAnalysisText}>
                {ai_analysis.description}
              </Text>
              
              {ai_analysis.repair_priorities && ai_analysis.repair_priorities.length > 0 && (
                <View style={styles.prioritiesContainer}>
                  <Text style={styles.prioritiesTitle}>Repair Priorities:</Text>
                  {ai_analysis.repair_priorities.map((priority, index) => (
                    <View key={index} style={styles.priorityItem}>
                      <Text style={styles.priorityNumber}>{index + 1}</Text>
                      <Text style={styles.priorityText}>{priority}</Text>
                    </View>
                  ))}
                </View>
              )}
              
              {ai_analysis.safety_concerns && ai_analysis.safety_concerns.length > 0 && (
                <View style={styles.safetyContainer}>
                  <Text style={styles.safetyTitle}>â ï¸ Safety Concerns:</Text>
                  {ai_analysis.safety_concerns.map((concern, index) => (
                    <Text key={index} style={styles.safetyText}>â¢ {concern}</Text>
                  ))}
                </View>
              )}
            </View>
          </Animatable.View>
        )}

        {/* Action Buttons */}
        <Animatable.View
          animation="fadeInUp"
          delay={1500}
          style={styles.actionsContainer}
        >
          <TouchableOpacity
            style={styles.actionButton}
            onPress={handleGenerateReport}
            disabled={isGeneratingReport}
            activeOpacity={0.8}
          >
            <LinearGradient
              colors={colors.primaryGradient}
              style={styles.actionButtonGradient}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
            >
              {isGeneratingReport ? (
                <LoadingSpinner color={colors.textLight} size="small" />
              ) : (
                <>
                  <Ionicons name="document-text" size={20} color={colors.textLight} />
                  <Text style={styles.actionButtonText}>Generate PDF Report</Text>
                </>
              )}
            </LinearGradient>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[styles.actionButton, styles.secondaryActionButton]}
            onPress={() => setShowFeedbackModal(true)}
            activeOpacity={0.8}
          >
            <View style={styles.secondaryActionButtonContent}>
              <Ionicons name="chatbubble-outline" size={20} color={colors.primary} />
              <Text style={styles.secondaryActionButtonText}>Provide Feedback</Text>
            </View>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[styles.actionButton, styles.secondaryActionButton]}
            onPress={goToDashboard}
            activeOpacity={0.8}
          >
            <View style={styles.secondaryActionButtonContent}>
              <Ionicons name="home-outline" size={20} color={colors.primary} />
              <Text style={styles.secondaryActionButtonText}>Back to Dashboard</Text>
            </View>
          </TouchableOpacity>
        </Animatable.View>
      </ScrollView>

      {/* Image Modal */}
      <Modal
        visible={showImageModal}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setShowImageModal(false)}
      >
        <View style={styles.modalContainer}>
          <TouchableOpacity
            style={styles.modalBackdrop}
            onPress={() => setShowImageModal(false)}
            activeOpacity={1}
          >
            <View style={styles.modalContent}>
              <TouchableOpacity
                style={styles.modalCloseButton}
                onPress={() => setShowImageModal(false)}
              >
                <Ionicons name="close" size={24} color={colors.textLight} />
              </TouchableOpacity>
              
              <Image
                source={{
                  uri: selectedImage === 'heatmap' && assessmentData.heatmap_url ? 
                    `${ENV.API_BASE_URL}${assessmentData.heatmap_url}` : 
                    null
                }}
                style={styles.modalImage}
                resizeMode="contain"
                defaultSource={require('../../../assets/icon.png')}
              />
              
              <Text style={styles.modalImageTitle}>
                {selectedImage === 'original' ? 'Original Image' : 'Damage Heatmap'}
              </Text>
            </View>
          </TouchableOpacity>
        </View>
      </Modal>

      {/* Feedback Modal */}
      <FeedbackModal
        visible={showFeedbackModal}
        onClose={() => setShowFeedbackModal(false)}
        assessmentId={assessmentId}
        assessmentData={assessmentData}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: colors.background,
  },
  loadingText: {
    ...typography.body1,
    color: colors.textSecondary,
    marginTop: spacing.lg,
  },
  header: {
    paddingTop: spacing.xxl + 20,
    paddingBottom: spacing.lg,
    paddingHorizontal: spacing.lg,
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerTextContainer: {
    flex: 1,
    alignItems: 'center',
    marginHorizontal: spacing.md,
  },
  headerTitle: {
    ...typography.h5,
    color: colors.textLight,
    fontWeight: 'bold',
  },
  headerSubtitle: {
    ...typography.body2,
    color: 'rgba(255, 255, 255, 0.8)',
    marginTop: spacing.xs,
  },
  shareButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  scrollContainer: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: spacing.lg,
    paddingBottom: spacing.xl,
  },
  successContainer: {
    alignItems: 'center',
    paddingVertical: spacing.xl,
  },
  successAnimation: {
    width: 80,
    height: 80,
    marginBottom: spacing.md,
  },
  successText: {
    ...typography.h5,
    fontWeight: 'bold',
  },
  section: {
    marginBottom: spacing.xl,
  },
  sectionTitle: {
    ...typography.h6,
    fontWeight: 'bold',
    marginBottom: spacing.lg,
  },
  metricsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginHorizontal: -spacing.xs,
  },
  metricCard: {
    width: (width - spacing.lg * 2 - spacing.sm) / 2,
    backgroundColor: colors.surface,
    borderRadius: 16,
    padding: spacing.lg,
    alignItems: 'center',
    marginHorizontal: spacing.xs,
    marginBottom: spacing.md,
    ...shadowStyles.medium,
  },
  metricValue: {
    ...typography.h4,
    fontWeight: 'bold',
    color: colors.text,
    marginTop: spacing.sm,
    marginBottom: spacing.xs,
  },
  metricLabel: {
    ...typography.caption,
    color: colors.textSecondary,
    textAlign: 'center',
  },
  imagesContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginHorizontal: -spacing.xs,
  },
  imageCard: {
    flex: 1,
    marginHorizontal: spacing.xs,
    borderRadius: 12,
    overflow: 'hidden',
    ...shadowStyles.medium,
  },
  analysisImage: {
    width: '100%',
    height: 150,
  },
  imageOverlay: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(0,0,0,0.7)',
    padding: spacing.sm,
  },
  imageLabel: {
    ...typography.body2,
    color: colors.textLight,
    fontWeight: '600',
    textAlign: 'center',
  },
  aiAnalysisCard: {
    backgroundColor: colors.surface,
    borderRadius: 16,
    padding: spacing.lg,
    borderWidth: 1,
    borderColor: colors.border,
    ...shadowStyles.medium,
  },
  aiAnalysisHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: spacing.md,
  },
  aiAnalysisTitle: {
    ...typography.h6,
    color: colors.text,
    fontWeight: '600',
    marginLeft: spacing.sm,
  },
  aiAnalysisText: {
    ...typography.body2,
    color: colors.text,
    lineHeight: 22,
    marginBottom: spacing.lg,
  },
  prioritiesContainer: {
    marginBottom: spacing.lg,
  },
  prioritiesTitle: {
    ...typography.body1,
    color: colors.text,
    fontWeight: '600',
    marginBottom: spacing.sm,
  },
  priorityItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: spacing.sm,
  },
  priorityNumber: {
    ...typography.body2,
    color: colors.primary,
    fontWeight: 'bold',
    backgroundColor: `${colors.primary}15`,
    borderRadius: 12,
    width: 24,
    height: 24,
    textAlign: 'center',
    lineHeight: 24,
    marginRight: spacing.sm,
  },
  priorityText: {
    ...typography.body2,
    color: colors.text,
    flex: 1,
    lineHeight: 20,
  },
  safetyContainer: {
    backgroundColor: `${colors.error}10`,
    borderRadius: 12,
    padding: spacing.md,
    borderLeftWidth: 4,
    borderLeftColor: colors.error,
  },
  safetyTitle: {
    ...typography.body1,
    color: colors.error,
    fontWeight: '600',
    marginBottom: spacing.sm,
  },
  safetyText: {
    ...typography.body2,
    color: colors.error,
    marginBottom: spacing.xs,
  },
  actionsContainer: {
    marginTop: spacing.lg,
  },
  actionButton: {
    borderRadius: 15,
    overflow: 'hidden',
    marginBottom: spacing.md,
    ...shadowStyles.medium,
  },
  actionButtonGradient: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: spacing.lg,
    paddingHorizontal: spacing.xl,
  },
  actionButtonText: {
    ...typography.button,
    color: colors.textLight,
    marginLeft: spacing.sm,
  },
  secondaryActionButton: {
    backgroundColor: colors.surface,
    borderWidth: 1,
    borderColor: colors.border,
  },
  secondaryActionButtonContent: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: spacing.lg,
    paddingHorizontal: spacing.xl,
  },
  secondaryActionButtonText: {
    ...typography.button,
    color: colors.primary,
    marginLeft: spacing.sm,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.9)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalBackdrop: {
    flex: 1,
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    padding: spacing.lg,
  },
  modalContent: {
    width: '100%',
    maxWidth: width - spacing.lg * 2,
    alignItems: 'center',
  },
  modalCloseButton: {
    position: 'absolute',
    top: -spacing.xxl,
    right: 0,
    zIndex: 1,
    backgroundColor: 'rgba(255,255,255,0.2)',
    borderRadius: 20,
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalImage: {
    width: '100%',
    height: height * 0.6,
    borderRadius: 12,
  },
  modalImageTitle: {
    ...typography.h6,
    color: colors.textLight,
    marginTop: spacing.lg,
    textAlign: 'center',
  },
});

export default ResultsScreen;