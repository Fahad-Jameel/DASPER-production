import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Image,
  Alert,
  Share,
  Dimensions,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import * as Animatable from 'react-native-animatable';
import { Ionicons } from '@expo/vector-icons';
import * as Print from 'expo-print';
import * as Sharing from 'expo-sharing';

// Components
import { useAuth } from '../../contexts/AuthContext';
import { useTheme } from '../../contexts/ThemeContext';
import LoadingSpinner from '../../components/LoadingSpinner';
import CostBreakdownCard from '../../components/CostBreakdownCard';
import SeverityIndicator from '../../components/SeverityIndicator';

// Services
import DashboardService from '../../services/DashboardService';

import { colors, typography, spacing, shadowStyles } from '../../theme/theme';

const { width, height } = Dimensions.get('window');

const ReportDetailScreen = ({ route, navigation }) => {
  const { assessmentId, reportData } = route.params;
  const [assessment, setAssessment] = useState(reportData || null);
  const [isLoading, setIsLoading] = useState(!reportData);
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);

  const { user } = useAuth();
  const { theme } = useTheme();

  useEffect(() => {
    if (!reportData && assessmentId) {
      loadAssessmentDetails();
    }
  }, [assessmentId, reportData]);

  const loadAssessmentDetails = async () => {
    try {
      const data = await DashboardService.getAssessmentDetail(assessmentId);
      setAssessment(data);
    } catch (error) {
      console.error('Load assessment details error:', error);
      Alert.alert('Error', 'Failed to load assessment details');
      navigation.goBack();
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateReport = async () => {
    setIsGeneratingReport(true);
    
    try {
      const reportData = await DashboardService.generateReport(assessmentId);
      
      Alert.alert(
        'Report Generated',
        'Your detailed assessment report has been generated successfully.',
        [
          {
            text: 'Download',
            onPress: () => handleDownloadReport(reportData.report_id),
          },
          {
            text: 'Share',
            onPress: () => handleShareReport(),
          },
          { text: 'Later', style: 'cancel' },
        ]
      );
    } catch (error) {
      Alert.alert('Error', 'Failed to generate report. Please try again.');
    } finally {
      setIsGeneratingReport(false);
    }
  };

  const handleDownloadReport = async (reportId) => {
    try {
      const reportBlob = await DashboardService.downloadReport(reportId);
      
      if (await Sharing.isAvailableAsync()) {
        // Create HTML content for PDF
        const htmlContent = generateHTMLReport();
        const { uri } = await Print.printToFileAsync({ html: htmlContent });
        
        await Sharing.shareAsync(uri, {
          mimeType: 'application/pdf',
          dialogTitle: 'DASPER Assessment Report',
        });
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to download report.');
    }
  };

  const handleShareReport = async () => {
    try {
      const summary = assessment.summary || {};
      const shareMessage = `DASPER Assessment Report\n\nBuilding: ${assessment.building_info?.name || assessment.building_name}\nSeverity: ${summary.severity_category || 'Unknown'}\nEstimated Cost: ${summary.estimated_cost_local || 'N/A'}\n\nGenerated by DASPER - Disaster Assessment & Structural Performance Evaluation`;
      
      await Share.share({
        message: shareMessage,
        title: 'DASPER Assessment Report',
      });
    } catch (error) {
      console.error('Share error:', error);
    }
  };

  const generateHTMLReport = () => {
    // Use the structured data we create below
    
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>DASPER Assessment Report</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { text-align: center; margin-bottom: 30px; }
            .section { margin-bottom: 20px; }
            .metric { display: inline-block; margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; }
            .severity-high { color: #f44336; }
            .severity-medium { color: #ff9800; }
            .severity-low { color: #4caf50; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>DASPER Assessment Report</h1>
            <h2>${building_info?.name || assessment.building_name}</h2>
          </div>
          
          <div class="section">
            <h3>Building Information</h3>
            <p><strong>Type:</strong> ${building_info?.type || assessment.building_type}</p>
            <p><strong>Location:</strong> ${building_info?.location || assessment.pin_location}</p>
            <p><strong>Area:</strong> ${building_info?.area_sqm || assessment.estimated_building_area_sqm}mÂ²</p>
          </div>
          
          <div class="section">
            <h3>Damage Assessment</h3>
            <p><strong>Severity Score:</strong> ${((damage_assessment?.severity_score || 0) * 100).toFixed(1)}%</p>
            <p><strong>Category:</strong> ${damage_assessment?.severity_category || 'Unknown'}</p>
            <p><strong>Confidence:</strong> ${((damage_assessment?.confidence || 0.8) * 100).toFixed(0)}%</p>
          </div>
          
          <div class="section">
            <h3>Cost Estimation</h3>
            <p><strong>Total Cost:</strong> $${(cost_estimation?.total_estimated_cost_usd || 0).toLocaleString()}</p>
            <p><strong>Repair Time:</strong> ${cost_estimation?.repair_time_days || 0} days</p>
          </div>
          
          ${ai_analysis?.description ? `
          <div class="section">
            <h3>AI Analysis</h3>
            <p>${ai_analysis.description}</p>
          </div>
          ` : ''}
          
          <div class="section">
            <p><em>Report generated on ${new Date().toLocaleDateString()} by DASPER</em></p>
          </div>
        </body>
      </html>
    `;
  };

  const getSeverityColor = (severity) => {
    if (severity <= 0.25) return colors.success;
    if (severity <= 0.5) return colors.warning;
    if (severity <= 0.75) return colors.secondary;
    return colors.error;
  };

  const formatCurrency = (amount) => {
    if (!amount) return '$0';
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    }
    return `$${amount.toFixed(0)}`;
  };

  const goBack = () => {
    navigation.goBack();
  };

  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <LoadingSpinner size="large" color={colors.primary} />
        <Text style={styles.loadingText}>Loading assessment details...</Text>
      </View>
    );
  }

  if (!assessment) {
    return (
      <View style={styles.errorContainer}>
        <Ionicons name="alert-circle" size={64} color={colors.error} />
        <Text style={styles.errorText}>Assessment not found</Text>
        <TouchableOpacity style={styles.backButton} onPress={goBack}>
          <Text style={styles.backButtonText}>Go Back</Text>
        </TouchableOpacity>
      </View>
    );
  }

  // Extract data from the API response structure
  const building_info = {
    name: assessment.building_name,
    area_sqm: assessment.building_area_sqm,
    type: assessment.building_type,
    location: assessment.pin_location
  };
  
  const damage_assessment = {
    severity_score: assessment.damage_percentage ? assessment.damage_percentage / 100 : 0,
    severity_category: assessment.damage_severity,
    confidence: assessment.confidence_score || 0.8
  };
  
  const cost_estimation = {
    total_estimated_cost_usd: assessment.estimated_cost || 0,
    repair_time_days: assessment.assessment_details?.cost_estimation?.repair_time_days || 
                     assessment.cost_breakdown?.repair_time_days || 8,
    ...assessment.cost_breakdown
  };
  
  const summary = {
    severity_category: assessment.damage_severity,
    estimated_cost_local: assessment.estimated_cost,
    estimated_cost_usd: assessment.estimated_cost
  };

  // AI Analysis - use recommendations from API or create fallback
  const ai_analysis = {
    description: assessment.recommendations?.length > 0 
      ? assessment.recommendations.join('. ') 
      : `Based on AI analysis, this building shows ${damage_assessment.severity_category} damage with a severity score of ${(damage_assessment.severity_score * 100).toFixed(1)}%. The estimated repair cost is $${cost_estimation.total_estimated_cost_usd?.toLocaleString() || '0'}.`,
    repair_priorities: assessment.recommendations || [],
    safety_concerns: damage_assessment.severity_category === 'severe' || damage_assessment.severity_category === 'destructive' 
      ? ['Structural integrity assessment needed', 'Professional inspection required'] 
      : []
  };

  return (
    <View style={[styles.container, { backgroundColor: theme.colors.background }]}>
      {/* Header */}
      <LinearGradient
        colors={colors.primaryGradient}
        style={styles.header}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
      >
        <View style={styles.headerContent}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={goBack}
            activeOpacity={0.7}
          >
            <Ionicons name="arrow-back" size={24} color={colors.textLight} />
          </TouchableOpacity>
          
          <View style={styles.headerTextContainer}>
            <Text style={styles.headerTitle}>Assessment Report</Text>
            <Text style={styles.headerSubtitle}>
              {assessment.building_name || 'Unnamed Building'}
            </Text>
          </View>
          
          <TouchableOpacity
            style={styles.shareButton}
            onPress={handleShareReport}
            activeOpacity={0.7}
          >
            <Ionicons name="share-outline" size={24} color={colors.textLight} />
          </TouchableOpacity>
        </View>
      </LinearGradient>

      <ScrollView
        style={styles.scrollContainer}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {/* Building Information */}
        <Animatable.View
          animation="fadeInUp"
          delay={200}
          style={styles.section}
        >
          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
            Building Information
          </Text>
          
          <View style={styles.infoCard}>
            <View style={styles.infoRow}>
              <Ionicons name="business" size={20} color={colors.primary} />
              <View style={styles.infoContent}>
                <Text style={styles.infoLabel}>Building Type</Text>
                <Text style={styles.infoValue}>
                  {(assessment.building_type || 'Unknown').charAt(0).toUpperCase() + 
                   (assessment.building_type || 'Unknown').slice(1)}
                </Text>
              </View>
            </View>
            
            <View style={styles.infoRow}>
              <Ionicons name="location" size={20} color={colors.primary} />
              <View style={styles.infoContent}>
                <Text style={styles.infoLabel}>Location</Text>
                <Text style={styles.infoValue}>
                  {assessment.pin_location || 'No location specified'}
                </Text>
              </View>
            </View>
            
            <View style={styles.infoRow}>
              <Ionicons name="resize" size={20} color={colors.primary} />
              <View style={styles.infoContent}>
                <Text style={styles.infoLabel}>Area</Text>
                <Text style={styles.infoValue}>
                  {assessment.estimated_building_area_sqm?.toFixed(0) || 0}mÂ²
                </Text>
              </View>
            </View>
          </View>
        </Animatable.View>

        {/* Severity Assessment */}
        <Animatable.View
          animation="fadeInUp"
          delay={400}
          style={styles.section}
        >
          <SeverityIndicator
            severity={damage_assessment?.severity_score || 0}
            confidence={damage_assessment?.confidence || 0.8}
            category={damage_assessment?.severity_category || 'unknown'}
          />
        </Animatable.View>

        {/* Images Comparison */}
        {assessment.images && (
          <Animatable.View
            animation="fadeInUp"
            delay={600}
            style={styles.section}
          >
            <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
              Analysis Images
            </Text>
            
            <View style={styles.imagesContainer}>
              {assessment.images.original && (
                <View style={styles.imageCard}>
                  <Image
                    source={{ 
                      uri: `data:image/jpeg;base64,${assessment.images.original}` 
                    }}
                    style={styles.analysisImage}
                    resizeMode="cover"
                  />
                  <Text style={styles.imageLabel}>Original Image</Text>
                </View>
              )}
              
              {assessment.images.heatmap && (
                <View style={styles.imageCard}>
                  <Image
                    source={{ 
                      uri: `data:image/jpeg;base64,${assessment.images.heatmap}` 
                    }}
                    style={styles.analysisImage}
                    resizeMode="cover"
                  />
                  <Text style={styles.imageLabel}>Damage Heatmap</Text>
                </View>
              )}
            </View>
          </Animatable.View>
        )}

        {/* Cost Breakdown */}
        <Animatable.View
          animation="fadeInUp"
          delay={800}
          style={styles.section}
        >
          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
            Cost Analysis
          </Text>
          
          <CostBreakdownCard costData={cost_estimation || {}} />
        </Animatable.View>

        {/* AI Analysis */}
        {ai_analysis?.description && (
          <Animatable.View
            animation="fadeInUp"
            delay={1000}
            style={styles.section}
          >
            <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
              AI Analysis Report
            </Text>
            
            <View style={styles.aiAnalysisCard}>
              <View style={styles.aiAnalysisHeader}>
                <Ionicons name="bulb" size={24} color={colors.primary} />
                <Text style={styles.aiAnalysisTitle}>Detailed Assessment</Text>
              </View>
              
              <Text style={styles.aiAnalysisText}>
                {ai_analysis.description}
              </Text>
              
              {ai_analysis.repair_priorities && ai_analysis.repair_priorities.length > 0 && (
                <View style={styles.prioritiesContainer}>
                  <Text style={styles.prioritiesTitle}>Repair Priorities:</Text>
                  {ai_analysis.repair_priorities.map((priority, index) => (
                    <View key={index} style={styles.priorityItem}>
                      <Text style={styles.priorityNumber}>{index + 1}</Text>
                      <Text style={styles.priorityText}>{priority}</Text>
                    </View>
                  ))}
                </View>
              )}
              
              {ai_analysis.safety_concerns && ai_analysis.safety_concerns.length > 0 && (
                <View style={styles.safetyContainer}>
                  <Text style={styles.safetyTitle}>â ï¸ Safety Concerns:</Text>
                  {ai_analysis.safety_concerns.map((concern, index) => (
                    <Text key={index} style={styles.safetyText}>â¢ {concern}</Text>
                  ))}
                </View>
              )}
            </View>
          </Animatable.View>
        )}

        {/* Assessment Metadata */}
        <Animatable.View
          animation="fadeInUp"
          delay={1200}
          style={styles.section}
        >
          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>
            Assessment Details
          </Text>
          
          <View style={styles.metadataCard}>
            <View style={styles.metadataRow}>
              <Text style={styles.metadataLabel}>Assessment ID:</Text>
              <Text style={styles.metadataValue}>{assessmentId}</Text>
            </View>
            
            <View style={styles.metadataRow}>
              <Text style={styles.metadataLabel}>Created:</Text>
              <Text style={styles.metadataValue}>
                {new Date(assessment.timestamp).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </Text>
            </View>
            
            <View style={styles.metadataRow}>
              <Text style={styles.metadataLabel}>Privacy:</Text>
              <Text style={styles.metadataValue}>
                {assessment.is_public ? 'Public' : 'Private'}
              </Text>
            </View>
          </View>
        </Animatable.View>

        {/* Action Buttons */}
        <Animatable.View
          animation="fadeInUp"
          delay={1400}
          style={styles.actionsContainer}
        >
          <TouchableOpacity
            style={styles.actionButton}
            onPress={handleGenerateReport}
            disabled={isGeneratingReport}
            activeOpacity={0.8}
          >
            <LinearGradient
              colors={colors.primaryGradient}
              style={styles.actionButtonGradient}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
            >
              {isGeneratingReport ? (
                <LoadingSpinner color={colors.textLight} size="small" />
              ) : (
                <>
                  <Ionicons name="document-text" size={20} color={colors.textLight} />
                  <Text style={styles.actionButtonText}>Generate PDF Report</Text>
                </>
              )}
            </LinearGradient>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[styles.actionButton, styles.secondaryActionButton]}
            onPress={handleShareReport}
            activeOpacity={0.8}
          >
            <View style={styles.secondaryActionButtonContent}>
              <Ionicons name="share-outline" size={20} color={colors.primary} />
              <Text style={styles.secondaryActionButtonText}>Share Assessment</Text>
            </View>
          </TouchableOpacity>
        </Animatable.View>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: colors.background,
  },
  loadingText: {
    ...typography.body1,
    color: colors.textSecondary,
    marginTop: spacing.lg,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: colors.background,
    paddingHorizontal: spacing.lg,
  },
  errorText: {
    ...typography.h6,
    color: colors.error,
    marginVertical: spacing.lg,
    textAlign: 'center',
  },
  header: {
    paddingTop: spacing.xxl + 20,
    paddingBottom: spacing.lg,
    paddingHorizontal: spacing.lg,
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerTextContainer: {
    flex: 1,
    alignItems: 'center',
    marginHorizontal: spacing.md,
  },
  headerTitle: {
    ...typography.h5,
    color: colors.textLight,
    fontWeight: 'bold',
  },
  headerSubtitle: {
    ...typography.body2,
    color: 'rgba(255, 255, 255, 0.8)',
    marginTop: spacing.xs,
  },
  shareButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  scrollContainer: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: spacing.lg,
    paddingBottom: spacing.xl,
  },
  section: {
    marginBottom: spacing.xl,
  },
  sectionTitle: {
    ...typography.h6,
    fontWeight: 'bold',
    marginBottom: spacing.lg,
  },
  infoCard: {
    backgroundColor: colors.surface,
    borderRadius: 16,
    padding: spacing.lg,
    borderWidth: 1,
    borderColor: colors.border,
    ...shadowStyles.medium,
  },
  infoRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: spacing.md,
  },
  infoContent: {
    marginLeft: spacing.md,
    flex: 1,
  },
  infoLabel: {
    ...typography.caption,
    color: colors.textSecondary,
    marginBottom: 2,
  },
  infoValue: {
    ...typography.body1,
    color: colors.text,
    fontWeight: '500',
  },
  imagesContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginHorizontal: -spacing.xs,
  },
  imageCard: {
    flex: 1,
    marginHorizontal: spacing.xs,
    backgroundColor: colors.surface,
    borderRadius: 12,
    overflow: 'hidden',
    ...shadowStyles.medium,
  },
  analysisImage: {
    width: '100%',
    height: 150,
  },
  imageLabel: {
    ...typography.body2,
    color: colors.text,
    fontWeight: '600',
    textAlign: 'center',
    padding: spacing.md,
  },
  aiAnalysisCard: {
    backgroundColor: colors.surface,
    borderRadius: 16,
    padding: spacing.lg,
    borderWidth: 1,
    borderColor: colors.border,
    ...shadowStyles.medium,
  },
  aiAnalysisHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: spacing.md,
  },
  aiAnalysisTitle: {
    ...typography.h6,
    color: colors.text,
    fontWeight: '600',
    marginLeft: spacing.sm,
  },
  aiAnalysisText: {
    ...typography.body2,
    color: colors.text,
    lineHeight: 22,
    marginBottom: spacing.lg,
  },
  prioritiesContainer: {
    marginBottom: spacing.lg,
  },
  prioritiesTitle: {
    ...typography.body1,
    color: colors.text,
    fontWeight: '600',
    marginBottom: spacing.sm,
  },
  priorityItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: spacing.sm,
  },
  priorityNumber: {
    ...typography.body2,
    color: colors.primary,
    fontWeight: 'bold',
    backgroundColor: `${colors.primary}15`,
    borderRadius: 12,
    width: 24,
    height: 24,
    textAlign: 'center',
    lineHeight: 24,
    marginRight: spacing.sm,
  },
  priorityText: {
    ...typography.body2,
    color: colors.text,
    flex: 1,
    lineHeight: 20,
  },
  safetyContainer: {
    backgroundColor: `${colors.error}10`,
    borderRadius: 12,
    padding: spacing.md,
    borderLeftWidth: 4,
    borderLeftColor: colors.error,
  },
  safetyTitle: {
    ...typography.body1,
    color: colors.error,
    fontWeight: '600',
    marginBottom: spacing.sm,
  },
  safetyText: {
    ...typography.body2,
    color: colors.error,
    marginBottom: spacing.xs,
  },
  metadataCard: {
    backgroundColor: colors.surface,
    borderRadius: 16,
    padding: spacing.lg,
    borderWidth: 1,
    borderColor: colors.border,
    ...shadowStyles.medium,
  },
  metadataRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: spacing.md,
  },
  metadataLabel: {
    ...typography.body2,
    color: colors.textSecondary,
  },
  metadataValue: {
    ...typography.body2,
    color: colors.text,
    fontWeight: '500',
    flex: 1,
    textAlign: 'right',
  },
  actionsContainer: {
    marginTop: spacing.lg,
  },
  actionButton: {
    borderRadius: 15,
    overflow: 'hidden',
    marginBottom: spacing.md,
    ...shadowStyles.medium,
  },
  actionButtonGradient: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: spacing.lg,
    paddingHorizontal: spacing.xl,
  },
  actionButtonText: {
    ...typography.button,
    color: colors.textLight,
    marginLeft: spacing.sm,
  },
  secondaryActionButton: {
    backgroundColor: colors.surface,
    borderWidth: 1,
    borderColor: colors.border,
  },
  secondaryActionButtonContent: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: spacing.lg,
    paddingHorizontal: spacing.xl,
  },
  secondaryActionButtonText: {
    ...typography.button,
    color: colors.primary,
    marginLeft: spacing.sm,
  },
});

export default ReportDetailScreen;